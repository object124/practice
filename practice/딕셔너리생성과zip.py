#일반 딕셔너리 생성방식
#d = {'a':1, 'b':2, 'c':3}
#d
#{'a': 1, 'b': 2, 'c': 3}
#그리고 딕셔너리는 dict라는 클래스의 객체이다
type({})
#<class 'dict'>
#d = dict[(('a', 1), ('b', 2), ('c', 3))] #튜플을 리스트 안에 넣어 딕셔너리 생성
#d = dict(a=1, b=2, c=3) #키워드 인자로 딕셔너리 생성

#키는 키대로 값은 값대로 리스트에 묶어 딕셔너리 생성 이 때는 zip을 사용
#d = dict(zip(['a', 'b', 'c'], [1, 2, 3]))# 키와 값을 따로 묶어 딕셔너리 생성
# zip의 왼쪽이 키로 사용 오른쪽이 값으로 사용

#딕셔너리 순서 보장
#d = {'a':1, 'b':2, 'c':3}
#d = ['d'] = 4
#d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}

#for k in d:
#    print(d[k], end = ', ')

#zip 함수의 이해
z = zip(['a', 'b', 'c'], [1, 2, 3])# 두 개의 리스트에 저장된 값들을 조합
for i in z:
    print(i, end = ', ')
#zip은 첫번째 리스트의 첫번째 값과 두번째 리스트의 첫번째 값을 순서대로 뽑아 튜플로 만들어 어떤 저장소에 저장.
#그리고 그 저장소에 접근할 수 있는 이터러블/이터레이터를 반환

#zip 함수에 대한 이해
#zip이 반환하는 객체는 for 루프에 둘 수 있음->이는 이터러블 객체임을 의미
#이를 리스트와 조합해 사용할 수도 있음
d = list(zip(['a', 'b', 'c'], [1, 2, 3]))
#리스트도 되면 튜플도 가능함
t = tuple(zip(['a', 'b', 'c'], [1, 2, 3]))
#dict 함수로도 가능함
d = dict(zip(['a', 'b', 'c'], [1, 2, 3]))


#zip은 값을 나누어 저장해야 할 때 유용함




